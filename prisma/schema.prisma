generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@map("users")
}

model Contest {
  id               String    @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  deadline         DateTime?
  startDate        DateTime?
  area             String?
  organizer        String
  website          String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  incentive        String?
  operatingCompany String?
  targetArea       String?
  targetAudience   String?
  organizerType    String?
  isPopular        Boolean?

  @@map("contests")
}

model Event {
  id               String    @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  startDate        DateTime
  endDate          DateTime?
  venue            String?
  area             String?
  organizer        String
  website          String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  organizerType    String
  operatingCompany String?
  targetArea       String?
  targetAudience   String?

  @@map("events")
}

model OpenCall {
  id                 String    @id @default(cuid())
  title              String
  description        String?
  imageUrl           String?
  deadline           DateTime?
  startDate          DateTime?
  area               String?
  organizer          String
  website            String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  organizerType      String
  targetArea         String?
  targetAudience     String?
  availableResources String?
  operatingCompany   String?

  @@map("open_calls")
}

model News {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  company     String
  sector      String?
  amount      String?
  investors   String?
  publishedAt DateTime?
  sourceUrl   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String
  area        String?

  @@map("news")
}

model Knowledge {
  id          String    @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  publishedAt DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryTag String?
  website     String?
  area        String?

  @@map("knowledge")
}

model Facility {
  id                String   @id @default(cuid())
  title             String
  description       String?
  imageUrl          String?
  address           String?
  area              String?
  organizer         String
  website           String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  facilityInfo      String?
  program           String?
  targetArea        String?
  targetAudience    String?
  organizerType     String
  isDropinAvailable Boolean  @default(false)
  isNexanaAvailable Boolean  @default(false)

  @@map("facilities")
}

model Post {
  id            String    @id @default(cuid())
  title         String
  description   String?
  content       String
  imageUrl      String?
  category      String?
  tags          String?
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  createdByUser User      @relation(fields: [createdBy], references: [id])

  @@map("posts")
}

enum UserRole {
  MEMBER
  EDITOR
  ADMIN
}
